#!/usr/bin/env python3
import sys
import heapq


def solve(N: int, a: "List[int]"):
    a = list(map(lambda x:x*(-1), a))
    heapq.heapify(a)
    A = 0
    B = 0
    for i in range(N):
        if i%2 == 0:
            A += heapq.heappop(a)*(-1)
        else:
            B += heapq.heappop(a)*(-1)

    print(A-B)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a)

if __name__ == '__main__':
    main()
